name: Regression Test Suite

on:
  pull_request:
    types: [opened, synchronize, reopened] # Triggers on PR open, push to PR branch, or PR reopen
jobs:
  # STAGE 1: Running unit tests for fast feedback
  unit_tests:
    name: Unit Tests Regression
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm install
      - name: Run Unit Tests (tagged for regression)
        run: npm run test:unit -- --json --outputFile=./reports/jest-results.json || true
      - name: Debug Report File
        run: |
          ls -lh ./reports
          cat ./reports/jest-results.json || echo "No output file found"
      - name: Report Test Results (dorny/test-reporter)
        uses: dorny/test-reporter@v1.8.0
        if: always()
        with:
          name: Jest Test Report
          path: ./reports/jest-results.json
          reporter: jest
          fail-on-error: "true"
      - name: Upload HTML Test Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-html-report
          path: ./reports/html
          retention-days: 7
      - name: Upload JUnit XML Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-junit-report
          path: ./reports/junit # Path to the directory generated by jest-junit
          retention-days: 7
      - name: Upload Coverage Report Artifact (HTML)
        if: always() # Ensure this runs even if tests fail to upload the report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./reports/coverage/lcov-report # Or just ./reports/coverage if you want the whole dir
          retention-days: 7
      - name: Check Test Outcome
        if: always() && steps.jest_tests.outcome == 'failure'
        run: |
          echo "Jest tests failed!"
          exit 1
  # STAGE 1: Running a subset of critical integration and e2e tests
  critical:
    name: Critical Tests Regression
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm install
      - name: Run Critical Tests
        run: npm run test:integration #TODO: add here critical instead of all integration
